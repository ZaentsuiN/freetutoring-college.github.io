<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Form Data Handler</title>
    <style>
        /* Optional: Basic styling for better readability */
        body {
            font-family: sans-serif;
            line-height: 1.6;
            padding: 20px;
        }
        label {
            display: inline-block;
            width: 100px; /* Adjust as needed */
            margin-bottom: 5px;
            vertical-align: top;
        }
        input[type="text"],
        input[type="email"],
        textarea {
            width: 250px; /* Adjust as needed */
            padding: 5px;
            margin-bottom: 10px;
            border: 1px solid #ccc;
            box-sizing: border-box; /* Include padding and border in element's total width */
        }
        textarea {
            height: 80px; /* Adjust as needed */
            vertical-align: top;
        }
        button {
            padding: 10px 15px;
            margin-right: 10px;
            cursor: pointer;
        }
    </style>
</head>
<body>

    <h1>Fill the Form</h1>

    <form id="dataForm">
        <label for="name">Name:</label>
        <input type="text" id="name" name="name" required><br><br>

        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required><br><br>

        <label for="subject">Subject:</label>
        <input type="text" id="subject" name="subject" required><br><br>

        <label for="message">Message:</label>
        <textarea id="message" name="message" required></textarea><br><br>

        <label for="course">Course:</label>
        <input type="text" id="course" name="course" required><br><br>

        <label for="availability">Availability:</label>
        <input type="text" id="availability" name="availability" required><br><br>

        <button type="button" onclick="downloadFormData()">Download as TXT</button>
        <button type="button" onclick="emailFormData()">Send via Email</button>
    </form>

    <script>
        // Helper function to get and validate form data
        function getAndValidateFormData() {
            const formData = {
                name: document.getElementById('name').value.trim(),
                email: document.getElementById('email').value.trim(),
                subject: document.getElementById('subject').value.trim(),
                message: document.getElementById('message').value.trim(),
                course: document.getElementById('course').value.trim(),
                availability: document.getElementById('availability').value.trim(),
            };

            // Validation: Ensure all fields are filled
            for (const key in formData) {
                // Check if the field exists in the form before validating
                // (Handles cases where a field might be removed from HTML)
                if (document.getElementById(key) && !formData[key]) {
                    // Capitalize first letter of the key for the alert message
                    const fieldName = key.charAt(0).toUpperCase() + key.slice(1);
                    alert(`Please fill in the ${fieldName} field.`);
                    return null; // Indicate validation failure
                }
            }
            return formData; // Return collected data if valid
        }

        // Function to trigger download as TXT
        function downloadFormData() {
            const formData = getAndValidateFormData();
            if (!formData) return; // Stop if validation failed

            // Format the data for the text file
            const fileContent = `Name: ${formData.name}\nEmail: ${formData.email}\nSubject: ${formData.subject}\nMessage: ${formData.message}\nCourse: ${formData.course}\nAvailability: ${formData.availability}\n`;

            // Create a Blob (Binary Large Object)
            const blob = new Blob([fileContent], { type: 'text/plain;charset=utf-8' });

            // Create a temporary link element
            const link = document.createElement("a");

            // Create a URL for the Blob
            const url = URL.createObjectURL(blob);
            link.setAttribute("href", url);

            // Set the download attribute with a filename
            // Use subject or a default name for the file
            const filename = (formData.subject || "formData") + ".txt";
            link.setAttribute("download", filename.replace(/[^a-z0-9._-]/gi, '_')); // Sanitize filename

            // Append link to body, click it, then remove it
            link.style.visibility = 'hidden'; // Hide the link
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);

             // Optional: Revoke the object URL after a short delay to ensure download starts
             setTimeout(() => URL.revokeObjectURL(url), 100);

             alert('Data prepared for download!'); // Feedback to user
        }

        // Function to open email client with form data
        function emailFormData() {
            const formData = getAndValidateFormData();
            if (!formData) return; // Stop if validation failed

            // Ask for confirmation before proceeding
            const userConfirmed = confirm('Are you sure you want to prepare this data for emailing?');
            if (!userConfirmed) {
                alert('Email preparation canceled.');
                return; // Stop if user cancels
            }

            // Format the email body text
            const emailBody = `
Name: ${formData.name}
Email: ${formData.email}
Subject: ${formData.subject}
Message: ${formData.message}
Course: ${formData.course}
Availability: ${formData.availability}
            `.trim(); // .trim() removes leading/trailing whitespace including the initial newline

            // Encode the subject and body for the mailto link
            const encodedBody = encodeURIComponent(emailBody);
            const encodedSubject = encodeURIComponent(formData.subject || "Form Submission"); // Use subject or default

            // Generate the mailto link (replace with your actual target email)
            const mailtoLink = `mailto:tutoring@example.com?subject=${encodedSubject}&body=${encodedBody}`;

            // Open the mailto link (trigger email client)
            // Check if the link is too long (browsers/email clients have limits)
            if (mailtoLink.length > 2000) { // Common limit, can vary
                 alert("The form data is too long to be sent via email link. Please use the download option.");
                 return;
            }

            window.location.href = mailtoLink;

            // No need for form submission confirmation here, as the user already confirmed
            // The actual sending happens in their email client.
        }
    </script>

</body>
</html>




Jump to Sections



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Jump to Sections Example</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
        }
        
        .content {
            max-width: 800px;
            margin: auto;
        }
        
        h1,h2{
            text-align: center;
        }
        section {
            margin-bottom: 30px;
        }
        
        #back-to-top {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background-color: #333;
            color: white;
            border: none;
            border-radius: 5px;
            padding: 10px 15px;
            cursor: pointer;
            display: none;
            transition: opacity 0.3s;
        }
        
        #back-to-top:hover {
            background-color: #555;
        }
        .table-of-contents {
            position: fixed;
            top: 15px;
            left: 10px;
            background: white;
            padding: 15px;
            border: 1px solid;
            border-radius: 5px;
            margin: auto;
            color: #4d3319;
        }
        
        .table-of-contents h2 {
            margin-top: 0;
        }
        
        .table-of-contents ul {
            padding-left: 15px;
        }
        
        .table-of-contents li {
            margin-bottom: 15px;
        }
        
        .table-of-contents a {
            text-decoration: none;
            color: #0066cc;
        }
        
        .table-of-contents a:hover {
            text-decoration: underline;
            padding: 13px 15px;
            cursor: pointer;
        background: #dee2e6;
        }
    </style>
</head>
<body>
    <div class="content">
        <h1 id="top">- Table of Contents -</h1>
        
        <!-- Table of Contents -->
        <div class="table-of-contents">
            <h3>Table of Contents</h3>
            <ul>
                <li><a href="#section1">Section 1</a></li>
                <li><a href="#section2">Section 2</a></li>
                <li><a href="#section3">Section 3</a></li>
                <li><a href="#section4">Section 4</a></li>
                <li><a href="#section5">Section 5</a></li>
            </ul>
        </div>
        
        <section id="section1">
            <h2>Section 1</h2>
        </section>
        
        <section id="section2">
            <h2>Section 2</h2>
        
        </section>
        
        <section id="section3">
            <h2>Section 3</h2>
            </section>
        
        <section id="section4">
            <h2>Section 4</h2>
            </section>
        
        <section id="section5">
            <h2>Section 5</h2>
            </section>
    </div>
    
    <button id="back-to-top" title="Back to Top">Back to Top</button>

    <script>
        // Get the button
        const backToTopButton = document.getElementById("back-to-top");
        
        // Show the button when the user scrolls down 300px from the top
        window.onscroll = function() {
            if (document.body.scrollTop > 300 || document.documentElement.scrollTop > 300) {
                backToTopButton.style.display = "block";
            } else {
                backToTopButton.style.display = "none";
            }
        };
        
        // Scroll back to the top when the button is clicked
        backToTopButton.addEventListener("click", function() {
            // For Safari
            document.body.scrollTop = 0;
            // For Chrome, Firefox, IE and Opera
            document.documentElement.scrollTop = 0;
        });
    </script>
</body>
</html>


Dropdown Navigation



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dropdown Navigation Example</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
        }
        
        .content {
            max-width: 800px;
            margin: 0 auto;
        }
        
        h1 {
            text-align: center;
        }
        
        section {
            margin-bottom: 30px;
        }
        
        #back-to-top {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background-color: #333;
            color: white;
            border: none;
            border-radius: 5px;
            padding: 10px 15px;
            cursor: pointer;
            display: none;
            transition: opacity 0.3s;
        }
        
        #back-to-top:hover {
            background-color: #555;
        }
        
        /* Dropdown Navigation Styles */
        .dropdown-nav {
            position: fixed;
            top: 20px;
            left: 20px;
        }
        
        .dropdown-button {
            background-color: #0066cc;
            color: white;
            padding: 12px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            width: 100%;
            text-align: left;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .dropdown-button:hover {
            background-color: #0052a3;
        }
        
        .dropdown-content {
            display: none;
            position: absolute;
            background: white;
            min-width: 160px;
            box-shadow: 0 8px 16px rgba(0,0,0,0.2);
            border-radius: 4px;
            padding: 10px;
        }
        
        .dropdown-content a {
            color: black;
            padding: 12px 16px;
            text-decoration: none;
            display: block;
            transition: background-color 0.2s;
        }
        
        .dropdown-content a:hover {
            background-color: #f1f1f1;
        }
        
        .show {
            display: block;
        }
        
        .arrow {
            border: solid white;
            border-width: 0 3px 3px 0;
            display: inline-block;
            padding: 3px;
            transform: rotate(45deg);
            transition: transform 0.3s;
        }
        
        .arrow-up {
            transform: rotate(-135deg);
        }
    </style>
</head>
<body>
    <div class="content">
        <h1 id="top">Page Title</h1>
        
        <!-- Dropdown Navigation -->
        <div class="dropdown-nav">
            <button class="dropdown-button" onclick="toggleDropdown()">
                Jump to Section <span class="arrow" id="dropdown-arrow"></span>
            </button>
            <div class="dropdown-content" id="dropdown-content">
                <a href="#section1">Section 1</a>
                <a href="#section2">Section 2</a>
                <a href="#section3">Section 3</a>
                <a href="#section4">Section 4</a>
                <a href="#section5">Section 5</a>
            </div>
        </div>
        
        <section id="section1">
            <h2>Section 1</h2>
            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>
            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>
        </section>
        
        <section id="section2">
            <h2>Section 2</h2>
            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>
            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>
        </section>
        
        <section id="section3">
            <h2>Section 3</h2>
            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>
            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>
        </section>
        
        <section id="section4">
            <h2>Section 4</h2>
            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>
            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>
        </section>
        
        <section id="section5">
            <h2>Section 5</h2>
            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>
            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>
        </section>
    </div>
    
    <button id="back-to-top" title="Back to Top">Back to Top</button>

    <script>
        // Back to top button functionality
        const backToTopButton = document.getElementById("back-to-top");
        
        window.onscroll = function() {
            if (document.body.scrollTop > 300 || document.documentElement.scrollTop > 300) {
                backToTopButton.style.display = "block";
            } else {
                backToTopButton.style.display = "none";
            }
        };
        
        backToTopButton.addEventListener("click", function() {
            document.body.scrollTop = 0; // For Safari
            document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
        });
        
        // Dropdown functionality
        function toggleDropdown() {
            document.getElementById("dropdown-content").classList.toggle("show");
            document.getElementById("dropdown-arrow").classList.toggle("arrow-up");
        }
        
        // Close the dropdown if the user clicks outside of it
        window.onclick = function(event) {
            if (!event.target.matches('.dropdown-button') && !event.target.matches('.arrow')) {
                var dropdowns = document.getElementsByClassName("dropdown-content");
                var arrows = document.getElementsByClassName("arrow");
                
                for (var i = 0; i < dropdowns.length; i++) {
                    var openDropdown = dropdowns[i];
                    if (openDropdown.classList.contains('show')) {
                        openDropdown.classList.remove('show');
                    }
                }
                
                for (var i = 0; i < arrows.length; i++) {
                    var arrow = arrows[i];
                    if (arrow.classList.contains('arrow-up')) {
                        arrow.classList.remove('arrow-up');
                    }
                }
            }
        }
        
        // Close dropdown after clicking a link
        document.querySelectorAll('.dropdown-content a').forEach(item => {
            item.addEventListener('click', event => {
                document.getElementById("dropdown-content").classList.remove("show");
                document.getElementById("dropdown-arrow").classList.remove("arrow-up");
            });
        });
    </script>
</body>
</html>



Sections with Dark Mode



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Colorful Sections with Dark Mode</title>
    <style>
        :root {
            --bg-color: #ffffff;
            --text-color: #333333;
            --primary-color: #4a6fa5;
            --secondary-color: #ff7e5f;
            --section1-color: #e6f7ff;
            --section2-color: #fff5e6;
        }

        [data-theme="dark"] {
            --bg-color: #1a1a1a;
            --text-color: #f0f0f0;
            --primary-color: #6b9bcf;
            --secondary-color: #ff9f7f;
            --section1-color: #00334d;
            --section2-color: #332100;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background-color: var(--bg-color);
            color: var(--text-color);
            transition: background-color 0.3s, color 0.3s;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 0;
        }

        h1 {
            color: var(--primary-color);
            margin: 0;
        }

        .theme-toggle {
            background: var(--secondary-color);
            border: none;
            padding: 8px 15px;
            border-radius: 20px;
            cursor: pointer;
            font-weight: bold;
            color: white;
            transition: transform 0.2s;
        }

        .theme-toggle:hover {
            transform: scale(1.05);
        }

        .section {
            padding: 60px 0;
            margin: 30px 0;
            border-radius: 15px;
            transition: background-color 0.3s;
        }

        .section-1 {
            background-color: var(--section1-color);
        }

        .section-2 {
            background-color: var(--section2-color);
        }

        .section-title {
            color: var(--primary-color);
            margin-top: 0;
        }

        .section-content {
            line-height: 1.6;
        }

        @media (max-width: 768px) {
            .section {
                padding: 40px 20px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>Colorful Sections</h1>
            <button class="theme-toggle" id="themeToggle">Dark Mode</button>
        </header>

        <section class="section section-1">
            <div class="container">
                <h2 class="section-title">First Colorful Section</h2>
                <div class="section-content">
                    <p>This is the first section with a light blue background in light mode and a deep blue in dark mode. The text color automatically adjusts for readability. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam in dui mauris.</p>
                    <p>Vivamus suscipit tortor eget felis porttitor volutpat. Curabitur non nulla sit amet nisl tempus convallis quis ac lectus.</p>
                </div>
            </div>
        </section>

        <section class="section section-2">
            <div class="container">
                <h2 class="section-title">Second Colorful Section</h2>
                <div class="section-content">
                    <p>This section has a light orange background in light mode and a dark brown in dark mode. The toggle button changes all colors at once. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam in dui mauris.</p>
                    <p>Vivamus suscipit tortor eget felis porttitor volutpat. Curabitur non nulla sit amet nisl tempus convallis quis ac lectus.</p>
                </div>
            </div>
        </section>
    </div>

    <script>
        const themeToggle = document.getElementById('themeToggle');
        const htmlElement = document.documentElement;
        let isDarkMode = false;

        // Check for saved theme preference or use system preference
        const savedTheme = localStorage.getItem('theme');
        const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;

        if (savedTheme === 'dark' || (!savedTheme && systemPrefersDark)) {
            setDarkMode(true);
        }

        themeToggle.addEventListener('click', () => {
            isDarkMode = !isDarkMode;
            setDarkMode(isDarkMode);
        });

        function setDarkMode(darkMode) {
            if (darkMode) {
                htmlElement.setAttribute('data-theme', 'dark');
                themeToggle.textContent = 'Light Mode';
                localStorage.setItem('theme', 'dark');
            } else {
                htmlElement.removeAttribute('data-theme');
                themeToggle.textContent = 'Dark Mode';
                localStorage.setItem('theme', 'light');
            }
            isDarkMode = darkMode;
        }
    </script>
</body>
</html>



colorful sections with a dark/light mode 


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Two Colorful Sections</title>
    <style>/* Basic Reset & Defaults */
* {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

body {
    font-family: sans-serif;
    line-height: 1.6;
    /* Transitions applied to body for smooth global changes */
    transition: background-color 0.3s ease, color 0.3s ease;
}

/* --- Color Variables --- */
:root {
    /* Light Mode Colors */
    --bg-body-light: #f8f9fa;
    --text-body-light: #212529;
    --bg-section1-light: #add8e6; /* Light Blue */
    --text-section1-light: #1a2b33; /* Darker text for light blue */
    --bg-section2-light: #ffdab9; /* Light Orange (Peach Puff) */
    --text-section2-light: #4d3319; /* Darker text for light orange */
    --button-bg-light: #e9ecef;
    --button-text-light: #495057;
    --button-hover-bg-light: #dee2e6;
    --header-bg-light: #ffffff;

    /* Dark Mode Colors - Defined but applied via [data-theme='dark'] */
    --bg-body-dark: #1a1a1a; /* Darker gray */
    --text-body-dark: #f8f9fa;
    --bg-section1-dark: #00008b; /* Deep Blue */
    --text-section1-dark: #e6f0ff; /* Light text for deep blue */
    --bg-section2-dark: #5c4033; /* Dark Brown */
    --text-section2-dark: #ffe8d6; /* Light text for dark brown */
    --button-bg-dark: #343a40;
    --button-text-dark: #f8f9fa;
    --button-hover-bg-dark: #495057;
    --header-bg-dark: #212529;
}

/* Apply Light Mode Colors by Default */
body {
    background-color: var(--bg-body-light);
    color: var(--text-body-light);
}

.site-header {
    background-color: var(--header-bg-light);
}

.section-1 {
    background-color: var(--bg-section1-light);
    color: var(--text-section1-light);
}

.section-2 {
    background-color: var(--bg-section2-light);
    color: var(--text-section2-light);
}

#mode-toggle {
    background-color: var(--button-bg-light);
    color: var(--button-text-light);
}
#mode-toggle:hover {
    background-color: var(--button-hover-bg-light);
}


/* Apply Dark Mode Colors when data-theme='dark' */
html[data-theme='dark'] body {
    background-color: var(--bg-body-dark);
    color: var(--text-body-dark);
}

html[data-theme='dark'] .site-header {
    background-color: var(--header-bg-dark);
}

html[data-theme='dark'] .section-1 {
    background-color: var(--bg-section1-dark);
    color: var(--text-section1-dark);
}

html[data-theme='dark'] .section-2 {
    background-color: var(--bg-section2-dark);
    color: var(--text-section2-dark);
}

html[data-theme='dark'] #mode-toggle {
    background-color: var(--button-bg-dark);
    color: var(--button-text-dark);
}
html[data-theme='dark'] #mode-toggle:hover {
    background-color: var(--button-hover-bg-dark);
}

/* --- Layout & General Styling --- */
.site-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 2rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    /* Transition for header background */
    transition: background-color 0.3s ease;
}

.site-header h1 {
    font-size: 1.5rem;
}

#mode-toggle {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-weight: bold;
    /* Transition for button colors and hover */
    transition: background-color 0.2s ease, color 0.2s ease;
}

main {
    padding: 1rem; /* Padding around the main content area */
}

.colorful-section {
    padding: 2rem; /* Default padding */
    margin-bottom: 1rem;
    border-radius: 8px;
    /* Transition for section background and text colors */
    transition: background-color 0.3s ease, color 0.3s ease;
}
.colorful-section:last-child {
    margin-bottom: 0;
}

.colorful-section h2 {
    margin-bottom: 1rem;
    font-size: 1.8rem;
}

.colorful-section p {
    margin-bottom: 0.5rem;
}


/* --- Responsive Design --- */
@media (min-width: 768px) {
    /* Increase padding on larger screens if desired */
    .colorful-section {
        padding: 3rem;
    }
    main {
        padding: 2rem;
    }
    .site-header {
        padding: 1rem 4rem;
    }
}

@media (max-width: 480px) {
    /* Adjust padding for smaller mobile screens */
    .site-header {
        padding: 0.8rem 1rem;
        flex-direction: column; /* Stack header items on very small screens */
        gap: 0.5rem;
    }
    .site-header h1 {
        font-size: 1.2rem;
    }
    main {
        padding: 0.5rem;
    }
     .colorful-section {
        padding: 1.5rem; /* Slightly reduce padding */
    }
}</style>
    ///<link rel="stylesheet" href="style.css">
</head>
<body>
    <header class="site-header">
        <h1>Colorful Page</h1>
        <button id="mode-toggle" aria-label="Toggle dark/light mode">
            Toggle Mode
        </button>
    </header>

    <main>
        <section class="colorful-section section-1">
            <h2>Section 1</h2>
            <p>This section has a light blue background in light mode and a deep blue background in dark mode. The text color adjusts automatically for readability.</p>
            <p>Lorem ipsum dolor sit amet consectetur adipisicing elit.</p>
        </section>

        <section class="colorful-section section-2">
            <h2>Section 2</h2>
            <p>This section uses light orange in light mode and dark brown in dark mode. Contrast is maintained for the text here as well.</p>
            <p>Quisquam voluptatum Amet laudantium Nemo.</p>
        </section>
    </main>
<script>const toggleButton = document.getElementById('mode-toggle');
const htmlElement = document.documentElement; // Target the <html> element

// Function to apply the theme
function applyTheme(theme) {
    htmlElement.setAttribute('data-theme', theme);
    // Update button text based on the current theme
    if (theme === 'dark') {
        toggleButton.textContent = 'Switch to Light Mode';
        toggleButton.setAttribute('aria-label', 'Switch to light mode');
    } else {
        toggleButton.textContent = 'Switch to Dark Mode';
        toggleButton.setAttribute('aria-label', 'Switch to dark mode');
    }
    // Save the user's preference to localStorage
    localStorage.setItem('theme', theme);
}

// Function to toggle between light and dark mode
function toggleTheme() {
    const currentTheme = htmlElement.getAttribute('data-theme');
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
    applyTheme(newTheme);
}

// --- Initialization ---

// 1. Check localStorage for a saved theme preference
const savedTheme = localStorage.getItem('theme');

// 2. Check system preference
const prefersDarkScheme = window.matchMedia('(prefers-color-scheme: dark)');

let initialTheme = 'light'; // Default to light

if (savedTheme) {
    // Use saved theme if available
    initialTheme = savedTheme;
} else if (prefersDarkScheme.matches) {
    // Otherwise, use system preference
    initialTheme = 'dark';
}

// Apply the determined initial theme
applyTheme(initialTheme);

// Add event listener to the toggle button
toggleButton.addEventListener('click', toggleTheme);

// Optional: Listen for changes in system preference *if* no user preference is saved
// This part is slightly more complex as it should ideally only apply
// if the user hasn't manually overridden the theme yet.
// For simplicity, the core requirement is met by checking on load.
// If you want it to auto-update *while the page is open* when system settings change
// (and localStorage is not set), you could add:
/*
prefersDarkScheme.addEventListener('change', (e) => {
    // Only apply system preference change if localStorage is not set
    if (!localStorage.getItem('theme')) {
        applyTheme(e.matches ? 'dark' : 'light');
    }
});
*/
</script>
    /// <script src="script.js"></script>
</body>
</html>
